[
  {
    "answers" : [
      {
        "answerText" : "value",
        "isCorrect" : true
      },
      {
        "answerText" : "String",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      },
      {
        "answerText" : "\"Steve\"",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the variable in the following code:\n\nlet value = String(\"Steve\")\n"
  },
  {
    "answers" : [
      {
        "answerText" : "\"Steve\"",
        "isCorrect" : true
      },
      {
        "answerText" : "value",
        "isCorrect" : false
      },
      {
        "answerText" : "String",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the value of the variable in the following code:\n\nlet value = String(\"Steve\")\n"
  },
  {
    "answers" : [
      {
        "answerText" : "String",
        "isCorrect" : true
      },
      {
        "answerText" : "value",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      },
      {
        "answerText" : "\"Steve\"",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab",
      "types"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the type of the variable in the following code:\n\nlet value = String(\"Steve\")\n"
  },
  {
    "answers" : [
      {
        "answerText" : "theNumber",
        "isCorrect" : true
      },
      {
        "answerText" : "Int",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      },
      {
        "answerText" : " 5",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the variable in the following code:\n\nlet theNumber = 5\n"
  },
  {
    "answers" : [
      {
        "answerText" : " 5",
        "isCorrect" : true
      },
      {
        "answerText" : "theNumber",
        "isCorrect" : false
      },
      {
        "answerText" : "Int",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the value of the variable in the following code:\n\nlet theNumber = 5\n"
  },
  {
    "answers" : [
      {
        "answerText" : "Int",
        "isCorrect" : true
      },
      {
        "answerText" : "theNumber",
        "isCorrect" : false
      },
      {
        "answerText" : "Double",
        "isCorrect" : false
      },
      {
        "answerText" : " 5",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "types",
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the type of the variable in the following code:\n\nlet theNumber = 5\n"
  },
  {
    "answers" : [
      {
        "answerText" : "name",
        "isCorrect" : true
      },
      {
        "answerText" : "String",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      },
      {
        "answerText" : "\"Fred\"",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the variable in the following code:\n\nlet name = \"Fred\"\n"
  },
  {
    "answers" : [
      {
        "answerText" : "String",
        "isCorrect" : true
      },
      {
        "answerText" : "name",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      },
      {
        "answerText" : "\"Fred\"",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax",
      "types"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the type of the variable in the following code:\n\nlet name = \"Fred\"\n"
  },
  {
    "answers" : [
      {
        "answerText" : "\"Fred\"",
        "isCorrect" : true
      },
      {
        "answerText" : "name",
        "isCorrect" : false
      },
      {
        "answerText" : "String",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the value of the variable in the following code:\n\nlet name = \"Fred\"\n"
  },
  {
    "answers" : [
      {
        "answerText" : "\"Lambda\"",
        "isCorrect" : true
      },
      {
        "answerText" : "school",
        "isCorrect" : false
      },
      {
        "answerText" : "String",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the value of the variable in the following code:\n\nlet school: String = \"Lambda\"\n"
  },
  {
    "answers" : [
      {
        "answerText" : "school",
        "isCorrect" : true
      },
      {
        "answerText" : "String",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      },
      {
        "answerText" : "\"Lambda\"",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the variable in the following code:\n\nlet school: String = \"Lambda\"\n"
  },
  {
    "answers" : [
      {
        "answerText" : "String",
        "isCorrect" : true
      },
      {
        "answerText" : "school",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      },
      {
        "answerText" : "\"Lambda\"",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the type of the variable in the following code:\n\nlet school: String = \"Lambda\"\n"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ constant",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ variable",
        "isCorrect" : false,
        "reason" : "\/\/ Not quite… the keyword `let` designates `example` as a constant"
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Is the following a constant or a variable?\n\nlet example = \"choose correctly!\""
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ variable",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ constant",
        "isCorrect" : false,
        "reason" : "\/\/ Not quite… the keyword `var` designates `example` as a variable"
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Is the following a constant or a variable?\n\nvar example = \"choose correctly!\""
  },
  {
    "answers" : [
      {
        "answerText" : " 1000",
        "isCorrect" : true
      },
      {
        "answerText" : "stairs",
        "isCorrect" : false
      },
      {
        "answerText" : "Int",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the value of the variable in the following code:\n\nlet stairs = 1000\n"
  },
  {
    "answers" : [
      {
        "answerText" : "Int",
        "isCorrect" : true
      },
      {
        "answerText" : "stairs",
        "isCorrect" : false
      },
      {
        "answerText" : "Float",
        "isCorrect" : false
      },
      {
        "answerText" : " 1000",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab",
      "types"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the type of the variable in the following code:\n\nlet stairs = 1000\n"
  },
  {
    "answers" : [
      {
        "answerText" : "stairs",
        "isCorrect" : true
      },
      {
        "answerText" : "Int",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      },
      {
        "answerText" : " 1000",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the variable in the following code:\n\nlet stairs = 1000\n"
  },
  {
    "answers" : [
      {
        "answerText" : "score",
        "isCorrect" : true
      },
      {
        "answerText" : "Int",
        "isCorrect" : false
      },
      {
        "answerText" : "var",
        "isCorrect" : false
      },
      {
        "answerText" : " 0",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the variable in the following code:\n\nvar score: Int = 0\n"
  },
  {
    "answers" : [
      {
        "answerText" : "Int",
        "isCorrect" : true
      },
      {
        "answerText" : "score",
        "isCorrect" : false
      },
      {
        "answerText" : "var",
        "isCorrect" : false
      },
      {
        "answerText" : " 0",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "types",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the type of the variable in the following code:\n\nvar score: Int = 0\n"
  },
  {
    "answers" : [
      {
        "answerText" : " 0",
        "isCorrect" : true
      },
      {
        "answerText" : "score",
        "isCorrect" : false
      },
      {
        "answerText" : "Int",
        "isCorrect" : false
      },
      {
        "answerText" : "var",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the value of the variable in the following code:\n\nvar score: Int = 0\n"
  },
  {
    "answers" : [
      {
        "answerText" : " 3.14",
        "isCorrect" : true
      },
      {
        "answerText" : "pi",
        "isCorrect" : false
      },
      {
        "answerText" : "Double",
        "isCorrect" : false
      },
      {
        "answerText" : "var",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the value of the variable in the following code:\n\nvar pi = Double(3.14)\n"
  },
  {
    "answers" : [
      {
        "answerText" : "pi",
        "isCorrect" : true
      },
      {
        "answerText" : " 3.14",
        "isCorrect" : false
      },
      {
        "answerText" : "Double",
        "isCorrect" : false
      },
      {
        "answerText" : "var",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the variable in the following code:\n\nvar pi = Double(3.14)\n"
  },
  {
    "answers" : [
      {
        "answerText" : "Double",
        "isCorrect" : true
      },
      {
        "answerText" : "pi",
        "isCorrect" : false
      },
      {
        "answerText" : " 3.14",
        "isCorrect" : false
      },
      {
        "answerText" : "var",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "types",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the type of the variable in the following code:\n\nvar pi = Double(3.14)\n"
  },
  {
    "answers" : [
      {
        "answerText" : "centimeters",
        "isCorrect" : true
      },
      {
        "answerText" : " 2.54",
        "isCorrect" : false
      },
      {
        "answerText" : "Double",
        "isCorrect" : false
      },
      {
        "answerText" : "var",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the variable in the following code:\n\nvar centimeters = 2.54\n"
  },
  {
    "answers" : [
      {
        "answerText" : "Double",
        "isCorrect" : true
      },
      {
        "answerText" : "centimeters",
        "isCorrect" : false
      },
      {
        "answerText" : " 2.54",
        "isCorrect" : false
      },
      {
        "answerText" : "Float",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab",
      "types"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the type of the variable in the following code:\n\nvar centimeters = 2.54\n"
  },
  {
    "answers" : [
      {
        "answerText" : " 2.54",
        "isCorrect" : true
      },
      {
        "answerText" : "centimeters",
        "isCorrect" : false
      },
      {
        "answerText" : "Double",
        "isCorrect" : false
      },
      {
        "answerText" : "var",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the value of the variable in the following code:\n\nvar centimeters = 2.54\n"
  },
  {
    "answers" : [
      {
        "answerText" : " 42.0 \/\/ floating point",
        "isCorrect" : true,
        "reason" : "\/\/ Being extremely technical, the value is still only `42`, but since it's being stored as a Float, the decimal makes the value more specific to the type."
      },
      {
        "answerText" : " 42 \/\/ a whole number",
        "isCorrect" : false,
        "reason" : "\/\/ This is very close, but whole numbers are stored in memory as Int (or Integer) types. The question actually provides a floating point value, which is more specifically represented as \"42.0\""
      },
      {
        "answerText" : "meaningOfLife",
        "isCorrect" : false
      },
      {
        "answerText" : "Float",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "types",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the value of the variable in the following code:\n\nlet meaningOfLife = Float(42)\n"
  },
  {
    "answers" : [
      {
        "answerText" : "meaningOfLife",
        "isCorrect" : true
      },
      {
        "answerText" : " 42.0 \/\/ floating point",
        "isCorrect" : false,
        "reason" : "\/\/ Being extremely technical, the value is still only `42`, but since it's being stored as a Float, the decimal makes the value more specific to the type. Either way, this isn't the name of the variable."
      },
      {
        "answerText" : " 42 \/\/ a whole number",
        "isCorrect" : false,
        "reason" : "\/\/ This is very close to the value provided in the question, but whole numbers are stored in memory as Int (or Integer) types. The question actually provides a floating point value, which is more specifically represented as \"42.0\". Either way, this isn't the name of the variable."
      },
      {
        "answerText" : "Float",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the variable in the following code:\n\nlet meaningOfLife = Float(42)\n"
  },
  {
    "answers" : [
      {
        "answerText" : "Float",
        "isCorrect" : true
      },
      {
        "answerText" : "meaningOfLife",
        "isCorrect" : false
      },
      {
        "answerText" : " 42.0 \/\/ floating point",
        "isCorrect" : false,
        "reason" : "\/\/ Being extremely technical, the value is still only `42`, but since it's being stored as a Float, the decimal makes the value more specific to the type. Either way, `42.0` isn't the type of the variable."
      },
      {
        "answerText" : " 42 \/\/ a whole number",
        "isCorrect" : false,
        "reason" : "\/\/ This is very close to the value provided in the question, but whole numbers are stored in memory as Int (or Integer) types. The question actually provides a floating point value, which is more specifically represented as \"42.0\". Either way, `42` isn't the type of the variable."
      }
    ],
    "categoryTags" : [
      "types",
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the type of the variable in the following code:\n\nlet meaningOfLife = Float(42)\n"
  },
  {
    "answers" : [
      {
        "answerText" : "Float",
        "isCorrect" : true
      },
      {
        "answerText" : "daysInYear",
        "isCorrect" : false
      },
      {
        "answerText" : " 365.25",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab",
      "types"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the type of the variable in the following code:\n\nlet daysInYear: Float = 365.25\n"
  },
  {
    "answers" : [
      {
        "answerText" : "daysInYear",
        "isCorrect" : true
      },
      {
        "answerText" : "Float",
        "isCorrect" : false
      },
      {
        "answerText" : " 365.25",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the variable in the following code:\n\nlet daysInYear: Float = 365.25\n"
  },
  {
    "answers" : [
      {
        "answerText" : " 365.25",
        "isCorrect" : true
      },
      {
        "answerText" : "daysInYear",
        "isCorrect" : false
      },
      {
        "answerText" : "Float",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the value of the variable in the following code:\n\nlet daysInYear: Float = 365.25\n"
  },
  {
    "answers" : [
      {
        "answerText" : "true",
        "isCorrect" : true
      },
      {
        "answerText" : "understandsBinary",
        "isCorrect" : false
      },
      {
        "answerText" : "Bool",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the value of the variable in the following code:\n\nlet understandsBinary = true\n"
  },
  {
    "answers" : [
      {
        "answerText" : "understandsBinary",
        "isCorrect" : true
      },
      {
        "answerText" : "true",
        "isCorrect" : false
      },
      {
        "answerText" : "Bool",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the variable in the following code:\n\nlet understandsBinary = true\n"
  },
  {
    "answers" : [
      {
        "answerText" : "Bool",
        "isCorrect" : true
      },
      {
        "answerText" : "understandsBinary",
        "isCorrect" : false
      },
      {
        "answerText" : "true",
        "isCorrect" : false
      },
      {
        "answerText" : "let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "types",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the type of the variable in the following code:\n\nlet understandsBinary = true\n"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ Start with\nlet\n\/\/ and just change it later if necessary",
        "isCorrect" : true,
        "reason" : "\/\/ Yes! The compiler will warn you if you try to change the value of a constant, at which point you can decide for yourself if you just want to change it to a `var` or approach your problem in a different way. Additionally, the compiler can optimize the code with constants, so it's a very easy way to "
      },
      {
        "answerText" : "\/\/ Start with\nvar\n\/\/ and just change it later if necessary",
        "isCorrect" : false,
        "reason" : "\/\/ The compiler isn't nearly as smart at detecting things that are variable, but don't need to be."
      },
      {
        "answerText" : "\/\/ Just do both and let the compiler figure it out!\nlet var",
        "isCorrect" : false,
        "reason" : "\/\/ This just won't work."
      },
      {
        "answerText" : "\/\/ Neither! `let` and `var` are javascript!",
        "isCorrect" : false,
        "reason" : "\/\/ It's true that both exist in javascript, but Swift uses them as well."
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ When in doubt, what is the best practice when it comes to using `let` and `var`?\nvar myDudes\nlet myDudettes"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ A constant is a named value that cannot be changed  (immutable) once created. It is declared like this:\n\nlet myNewConstant = \"Some Value\"",
        "isCorrect" : true,
        "reason" : "\/\/ Correct! A constant cannot be changed once it's been created and is declared with the `let` keyword."
      },
      {
        "answerText" : "\/\/ A constant is a named value that cannot be changed (immutable) once created. It is declared like this:\n\nvar myNewConstant = \"Some Value\"",
        "isCorrect" : false,
        "reason" : "\/\/ Close! Look closely at line 3"
      },
      {
        "answerText" : "\/\/ A constant is a named value that can be changed (mutable) once created. It is declared like this:\n\nvar myNewConstant = \"Some Value\"",
        "isCorrect" : false,
        "reason" : "\/\/ Close! However, a constant is just like it sounds: it cannot be changed! It also doesn't use `var` as its keyword"
      },
      {
        "answerText" : "\/\/ A constant is a named value that can be changed (mutable) once created. It is declared like this:\n\nlet myNewConstant = \"Some Value\"",
        "isCorrect" : false,
        "reason" : "\/\/ Close! However, a constant is just like it sounds: it cannot be changed! "
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is a constant and how would you create one?\n\/\/ hint: read the answers *very* closely"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ A variable is a named value that can be changed  (mutable) once created. It is declared like this:\n\nvar myNewVariable = \"Some Value\"",
        "isCorrect" : true,
        "reason" : "\/\/ Correct! A variable can be changed as much as needed and is declared with the `var` keyword."
      },
      {
        "answerText" : "\/\/ A variable is a named value that can be changed  (mutable) once created. It is declared like this:\n\nlet myNewVariable = \"Some Value\"",
        "isCorrect" : false,
        "reason" : "\/\/ Close! Look closely at line 3"
      },
      {
        "answerText" : "\/\/ A variable is a named value that cannot be changed  (immutable) once created. It is declared like this:\n\nlet myNewVariable = \"Some Value\"",
        "isCorrect" : false,
        "reason" : "\/\/ Close! However, a variable is just like it sounds: it can vary after its creation! It also doesn't use `let` as its keyword"
      },
      {
        "answerText" : "\/\/ A variable is a named value that cannot be changed  (immutable) once created. It is declared like this:\n\nvar myNewVariable = \"Some Value\"",
        "isCorrect" : false,
        "reason" : "\/\/ Close! However, a variable is just like it sounds: it can vary after its creation!"
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is a variable and how would you create one?\n\/\/ hint: read the answers *very* closely"
  },
  {
    "answers" : [
      {
        "answerText" : "false",
        "isCorrect" : true,
        "reason" : "\/\/ if something is \"mutable\" it means that it can \"mutate\" or change, whereas \"immutable\" means that it *cannot* change"
      },
      {
        "answerText" : "true",
        "isCorrect" : false,
        "reason" : "\/\/ if something is \"mutable\" it means that it can \"mutate\" or change, whereas \"immutable\" means that it *cannot* change"
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Boolean (true or false):\n\n\/\/ a constant is mutable"
  },
  {
    "answers" : [
      {
        "answerText" : "true",
        "isCorrect" : true,
        "reason" : "\/\/ if something is \"mutable\" it means that it can \"mutate\" or change, whereas \"immutable\" means that it *cannot* change"
      },
      {
        "answerText" : "false",
        "isCorrect" : false,
        "reason" : "\/\/ if something is \"mutable\" it means that it can \"mutate\" or change, whereas \"immutable\" means that it *cannot* change"
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Boolean (true or false):\n\n\/\/ a variable is mutable"
  },
  {
    "answers" : [
      {
        "answerText" : "true",
        "isCorrect" : true,
        "reason" : "\/\/ if something is \"mutable\" it means that it can \"mutate\" or change, whereas \"immutable\" means that it *cannot* change"
      },
      {
        "answerText" : "false",
        "isCorrect" : false,
        "reason" : "\/\/ if something is \"mutable\" it means that it can \"mutate\" or change, whereas \"immutable\" means that it *cannot* change"
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Boolean (true or false):\n\n\/\/ a constant is immutable"
  },
  {
    "answers" : [
      {
        "answerText" : "false",
        "isCorrect" : true,
        "reason" : "\/\/ if something is \"mutable\" it means that it can \"mutate\" or change, whereas \"immutable\" means that it *cannot* change"
      },
      {
        "answerText" : "true",
        "isCorrect" : false,
        "reason" : "\/\/ if something is \"mutable\" it means that it can \"mutate\" or change, whereas \"immutable\" means that it *cannot* change"
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Boolean (true or false):\n\n\/\/ a variable is immutable"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ Mutability is the concept of whether a given item can change (mutate) or not. If an item can change, it is considered \"mutable\", whereas if it cannot, it is considered \"immutable\".",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ Mutability refers to the level to which a mutant in Xmen has deviated from the human genome.",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is \"mutability\"?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ The item can change",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ The item cannot change",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ The item is stable",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ The item is unstable",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What does it mean if an item is \"mutable\"?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ The item cannot change",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ The item can change",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ The item is stable",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ The item is unstable",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What does it mean if an item is \"immutable\"?"
  },
  {
    "answers" : [
      {
        "answerText" : "let hours = 24",
        "isCorrect" : true,
        "reason" : "\/\/ The following variations would also work:\nlet hours: Int = 24\nlet hours = Int(24)\nlet hours: Int = Int(24)\nlet hours = 12 * 2"
      },
      {
        "answerText" : "var hours = 24",
        "isCorrect" : false,
        "reason" : "\/\/ while not technically wrong, best practice is to start with a constant (let) and fall back to a variable (var) if necessary"
      },
      {
        "answerText" : "let 24 = hours",
        "isCorrect" : false
      },
      {
        "answerText" : "hours(24) = let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ If you were told to create a new integer called \"hours\" with a value of 24, how would you do that?"
  },
  {
    "answers" : [
      {
        "answerText" : "let theMeaningOfLife = 42",
        "isCorrect" : true,
        "reason" : "\/\/ The following variations would also work:\nlet theMeaningOfLife: Int = 42\nlet theMeaningOfLife = Int(42)\nlet theMeaningOfLife: Int = Int(42)\nlet theMeaningOfLife = 7 * 6"
      },
      {
        "answerText" : "var theMeaningOfLife = 42",
        "isCorrect" : false,
        "reason" : "\/\/ while not technically wrong, best practice is to start with a constant (let) and fall back to a variable (var) if necessary. Additionally, the meaning of life is unchanging!"
      },
      {
        "answerText" : "let 42 = theMeaningOfLife",
        "isCorrect" : false
      },
      {
        "answerText" : "theMeaningOfLife(42) = let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ If you were told to create a new integer called \"theMeaningOfLife\" with a value of 42, how would you do that?"
  },
  {
    "answers" : [
      {
        "answerText" : "let bestProgrammingLanguage = \"Swift\"",
        "isCorrect" : true,
        "reason" : "\/\/ The following variations would also work:\nlet bestProgrammingLanguage: String = \"Swift\"\nlet bestProgrammingLanguage = String(\"Swift\")\nlet bestProgrammingLanguage: String = String(\"Swift\")\nlet bestProgrammingLanguage = \"Swi\" + \"ft\""
      },
      {
        "answerText" : "var bestProgrammingLanguage = \"Swift\"",
        "isCorrect" : false,
        "reason" : "\/\/ while not technically wrong, best practice is to start with a constant (let) and fall back to a variable (var) if necessary."
      },
      {
        "answerText" : "let \"Swift\" = bestProgrammingLanguage",
        "isCorrect" : false
      },
      {
        "answerText" : "bestProgrammingLanguage(\"Swift\") = let",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ If you were told to create a new string called `bestProgrammingLanguage` with a value of \"Swift\", how would you do that?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ no",
        "isCorrect" : true,
        "reason" : "\/\/ \"Variable\" is actually an umbrella term that refer to both constants and variables. You will either have to make a guess based on context, or clarify with the person who made the statement."
      },
      {
        "answerText" : "\/\/ yes",
        "isCorrect" : false,
        "reason" : "\/\/ While it CAN, variable is actually an umbrella term that refer to both constants and variables. You will either have to make a guess based on context, or clarify with the person who made the statement."
      }
    ],
    "categoryTags" : [
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ If someone refers to a `variable`, does that explicitly mean that they are talking about a mutable value?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ yes",
        "isCorrect" : true,
        "reason" : "\/\/ While variable is an umbrella term that can generically refer to both mutable and immutable (constant and variable) values, constant is very specific and explicitly means \"an immutable value\"."
      },
      {
        "answerText" : "\/\/ no",
        "isCorrect" : false,
        "reason" : "\/\/ While variable is an umbrella term that can generically refer to both mutable and immutable (constant and variable) values, constant is very specific and explicitly means \"an immutable value\"."
      }
    ],
    "categoryTags" : [
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ If someone refers to a `constant`, does that explicitly mean that they are talking about an immutable value?"
  },
  {
    "answers" : [
      {
        "answerText" : "let originalTrilogy = [\"A New Hope\", \"Empire Strikes Back\", \"Return of the Jedi\"]",
        "isCorrect" : true,
        "reason" : "\/\/ The following variations would also work:\nlet originalTrilogy: [String] = [\"A New Hope\", \"Empire Strikes Back\", \"Return of the Jedi\"]\n\nlet originalTrilogy = Array([\"A New Hope\", \"Empire Strikes Back\", \"Return of the Jedi\"])\n\nlet originalTrilogy: [String] = Array([\"A New Hope\", \"Empire Strikes Back\", \"Return of the Jedi\"])\n\nlet originalTrilogy = [\"A New Hope\"] + [\"Empire Strikes Back\"] + [\"Return of the Jedi\"]\n"
      },
      {
        "answerText" : "let originalTrilogy = \"A New Hope\", \"Empire Strikes Back\", \"Return of the Jedi\"",
        "isCorrect" : false,
        "reason" : "\/\/ Array literals need to be wrapped in square brackets []"
      },
      {
        "answerText" : "originalTrilogy = [\"A New Hope\", \"Empire Strikes Back\", \"Return of the Jedi\"]",
        "isCorrect" : false,
        "reason" : "\/\/ Are you creating this or does `originalTrilogy` already exist? (the question asks you to create one)\n\/\/ You need to either provide `let` or `var` to let the compiler know if you want it to be a constant or variable when creating a new instance of something"
      },
      {
        "answerText" : "let originalTrilogy = \"A New Hope, Empire Strikes Back, Return of the Jedi\"",
        "isCorrect" : false,
        "reason" : "\/\/ This isn't an array, but a String"
      }
    ],
    "categoryTags" : [
      "types",
      "syntax",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ If you were told to create a new array called `originalTrilogy` listing the titles of the original Star Wars films, how would you do that?\n\n\/\/ (for those of you who may not be a jedi, the films are \"A New Hope\", \"Empire Strikes Back\", and \"Return of the Jedi\"."
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ an integer is a whole number value that can be negative as well as positive. Some examples are:\n5\n10\n-100\n1_000_000\n-500_000",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ an integer is a fractional number value that can be negative as well as positive. Some examples are:\n3.14\n-532.6\n100\n1_000_000.2",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ an integer is a whole number value that can only be positive. Some examples are:\n5\n10\n0\n1_000_000\n500_000",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ an integer is a fractional number value that can only be positive. Some examples are:\n3.14\n532.6\n100\n1_000_000.2",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "types",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is an integer (Int)?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ a Double is a fractional number value that can be negative as well as positive. Its precision is 64 bits. Some examples are:\n3.14\n-532.6\n100\n1_000_000.2",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ a Double is a whole number value that can be negative as well as positive. Some examples are:\n5\n10\n-100\n1_000_000\n-500_000",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ a Double is a whole number value that can only be positive. Some examples are:\n5\n10\n0\n1_000_000\n500_000",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ a Double is a fractional number value that can be negative as well as positive. Its precision is 32 bits. Some examples are:\n3.14\n-532.6\n100\n1_000_000.2",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "types"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is a Double?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ a Float is a fractional number value that can be negative as well as positive. Its precision is 32 bits. Some examples are:\n3.14\n-532.6\n100\n1_000_000.2",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ a Float is a fractional number value that can be negative as well as positive. Its precision is 64 bits. Some examples are:\n3.14\n-532.6\n100\n1_000_000.2",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ a Float is a whole number value that can be negative as well as positive. Some examples are:\n5\n10\n-100\n1_000_000\n-500_000",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ a Float is a whole number value that can only be positive. Some examples are:\n5\n10\n0\n1_000_000\n500_000",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "types"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is a Float?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ A String is list of Characters listed in a specific order. Characters can be any character including letters, numbers, and symbols. Some examples are:\n\"Hello world!\"\n\"🤪\"\n\"1234567890\"\n\"Swift is awesome!\"",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ A String is a material consisting of thread",
        "isCorrect" : false,
        "reason" : "\/\/ This has nothing to do with programming!"
      },
      {
        "answerText" : "\/\/ A String is a list of items strung together.",
        "isCorrect" : false,
        "reason" : "\/\/ Technically, this isn't wrong, but there's a better, more specific answer. (This one could also define an Array. String and Array are similar, but distinct from each other.)"
      },
      {
        "answerText" : "\/\/ A String is a list of unique items containing no duplicates",
        "isCorrect" : false,
        "reason" : "\/\/ This would better define a Set than a String"
      }
    ],
    "categoryTags" : [
      "vocab",
      "types"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is a String?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ A boolean is a value that can either be `true` or `false`.",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ A boolean is a value that can either be `true`, `false`, or `maybe`.",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ A boolean is the source of all ghosts' spookiness",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "types"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is a boolean (Bool)?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ An Array is an ordered list of items. It can be restricted to only allow a specific type or allow for Any type, depending on how you create it. \n\/\/ You can access a specific index of an array using a numerical value.\nlet myNewValue = myArray[5]",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ An array is a grouping of duplicates of the same item, organized in a circular fashion",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ An array is an unordered grouping of items. It can be restricted to only allow a specific type or allow for Any type, depending on how you create it.\n\/\/ You can access a specific item in an array by using a key to get its associated value\nlet myNewValue = myArray[\"name\"]",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ This answer is wrong!",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "types"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is an Array?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ A Dictionary is an unordered grouping of items. It can be restricted to only allow a specific type or allow for Any type, depending on how you create it.\n\/\/ You can access a specific item in an array by using a key to get its associated value\nlet myNewValue = myArray[\"name\"]",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ A Dictionary is an ordered list of items. It can be restricted to only allow a specific type or allow for Any type, depending on how you create it. \n\/\/ You can access a specific index of an array using a numerical value.\nlet myNewValue = myArray[5]",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ A Dictionary is book that defines words",
        "isCorrect" : false,
        "reason" : "\/\/ I mean, yeah, but that's not really relating to programming…"
      },
      {
        "answerText" : "\/\/ This answer is wrong!",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "vocab",
      "types"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is a Dictionary?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ When the programmer creates a new type to better represent some data or provide custom functionality. It can be a class, struct, or enum.",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ When you create a new value for any of the primitive types (Int, Double, Float, Bool, String, etc), you've customized it and therefore it's a \"custom type\".",
        "isCorrect" : false,
        "reason" : "\/\/ This would actually be a \"custom value\", but that's not really a term. Pretty much every value is custom."
      },
      {
        "answerText" : "\/\/ When the programmer extends the functionality of a type with an `extension`",
        "isCorrect" : false,
        "reason" : "\/\/ This is actually just called an `extension`"
      }
    ],
    "categoryTags" : [
      "types",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is a custom type?"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ When a value might not have been assigned yet, it could be `nil`. This can cause stability issues if the software assumes that a value is there when it isn't, so an optional let's the compiler know it MIGHT not be there. This allows the compiler to perform optimizations and safely execute the code, even if there might be `nil` values!",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ When you have the option to continue doing your homework or not.",
        "isCorrect" : false,
        "reason" : "\/\/ Nice try! DO YOUR HOMEWORK!"
      },
      {
        "answerText" : "\/\/ When a value might be 0",
        "isCorrect" : false,
        "reason" : "\/\/ Close…"
      },
      {
        "answerText" : "\/\/ When you have the option to write code multiple different ways, it is \"optional\" to do it in a specific way.",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "types",
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What is an optional?"
  },
  {
    "answers" : [
      {
        "answerText" : "false",
        "isCorrect" : true,
        "reason" : "\/\/ 0 means a value of 0. nil means \"the absense of a value\".\n\n\/\/ Think of a scenario where you ask someone else for a note. They could then give you a blank note. Well, it's empty, but you now have a value of nothing, but if they never gave you anything, you have a complete absense of any value."
      },
      {
        "answerText" : "true",
        "isCorrect" : false,
        "reason" : "\/\/ 0 means a value of 0. nil means \"the absense of a value\".\n\n\/\/ Think of a scenario where you ask someone else for a note. They could then give you a blank note. Well, it's empty, but you now have a value of nothing, but if they never gave you anything, you have a complete absense of any value."
      }
    ],
    "categoryTags" : [
      "vocab"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Boolean (true or false):\n\n\/\/ nil and 0 are the same thing"
  },
  {
    "answers" : [
      {
        "answerText" : "add",
        "isCorrect" : true
      },
      {
        "answerText" : "func add",
        "isCorrect" : false
      },
      {
        "answerText" : "addendOne",
        "isCorrect" : false
      },
      {
        "answerText" : "-> Int",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "functions",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the function name in the following code:\n\nfunc add(number addendOne: Int, number2 addendTwo: Int) -> Int {\n\treturn addendOne + addendTwo\n}"
  },
  {
    "answers" : [
      {
        "answerText" : "addendOne\n\/\/ and\naddendTwo",
        "isCorrect" : true
      },
      {
        "answerText" : "number\n\/\/ and\nnumber2",
        "isCorrect" : false
      },
      {
        "answerText" : "add\n\/\/ and\nInt",
        "isCorrect" : false
      },
      {
        "answerText" : "func\n\/\/ and\nreturn",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "functions"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the parameter names in the following code:\n\nfunc add(number addendOne: Int, number2 addendTwo: Int) -> Int {\n\treturn addendOne + addendTwo\n}"
  },
  {
    "answers" : [
      {
        "answerText" : "number\n\/\/ and\nnumber2",
        "isCorrect" : true
      },
      {
        "answerText" : "addendOne\n\/\/ and\naddendTwo",
        "isCorrect" : false
      },
      {
        "answerText" : "add\n\/\/ and\nInt",
        "isCorrect" : false
      },
      {
        "answerText" : "func\n\/\/ and\nreturn",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "functions",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the parameter labels in the following code:\n\nfunc add(number addendOne: Int, number2 addendTwo: Int) -> Int {\n\treturn addendOne + addendTwo\n}"
  },
  {
    "answers" : [
      {
        "answerText" : "Int",
        "isCorrect" : true
      },
      {
        "answerText" : "return",
        "isCorrect" : false
      },
      {
        "answerText" : "func",
        "isCorrect" : false
      },
      {
        "answerText" : "add",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "functions"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the return type in the following code:\n\nfunc add(number addendOne: Int, number2 addendTwo: Int) -> Int {\n\treturn addendOne + addendTwo\n}"
  },
  {
    "answers" : [
      {
        "answerText" : "String",
        "isCorrect" : true
      },
      {
        "answerText" : "Int",
        "isCorrect" : false
      },
      {
        "answerText" : "func",
        "isCorrect" : false
      },
      {
        "answerText" : "Int and String",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "functions",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the return type in the following code:\n\nfunc stringify(number1: Int, number2: Int) -> String {\n\treturn \"\\(number1) + \\(number2) is equal to \\(number1 + number2)\"\n}"
  },
  {
    "answers" : [
      {
        "answerText" : "stringify",
        "isCorrect" : true
      },
      {
        "answerText" : "number1",
        "isCorrect" : false
      },
      {
        "answerText" : "func stringify(number1: Int, number2: Int) -> String",
        "isCorrect" : false
      },
      {
        "answerText" : "-> String",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "functions"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the function name in the following code:\n\nfunc stringify(number1: Int, number2: Int) -> String {\n\treturn \"\\(number1) + \\(number2) is equal to \\(number1 + number2)\"\n}"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ the number 7 would print out to the console",
        "isCorrect" : true
      },
      {
        "answerText" : " 7",
        "isCorrect" : false,
        "reason" : "\/\/ while the function would end up returning the value 7, it's not the whole story of what's happening on line 7"
      },
      {
        "answerText" : "\/\/ \"add(number: 3, number2: 4)\" would print out to the console",
        "isCorrect" : false
      },
      {
        "answerText" : " 12",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "functions",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ If you were to run the following code, what would the result of line 7 be?\n\nfunc add(number addendOne: Int, number2 addendTwo: Int) -> Int {\n\treturn addendOne + addendTwo\n}\n\nprint(add(number: 3, number2: 4))"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ the constant\nmathStatement\n\/\/ would be of type String with the value\n\"5 + 20 is equal to 25\"",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ \"5 + 20 is equal to 25\" would print out to the console",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ \"20 + 5 is equal to 25\" would print out to the console",
        "isCorrect" : false
      },
      {
        "answerText" : " 25",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "functions",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ If you were to run the following code, what would the result of line 7 be?\n\nfunc stringify(number1: Int, number2: Int) -> String {\n\treturn \"\\(number1) + \\(number2) is equal to \\(number1 + number2)\"\n}\n\nlet mathStatement = stringify(number1: 5, number2: 20)"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ 4",
        "isCorrect" : true,
        "reason" : "value1, value2, valueFour, and here"
      },
      {
        "answerText" : "\/\/ 6",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ 5",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ 3",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "functions"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ How many parameters are in the following function?\n\nfunc aLongFunction(_ value1: Int, value2: String, valueFour: Double, withAnotherValue here: Bool) {\n\tprint(\"Well don't you feel foolish now, passing so many arguments into a function that only prints out an insulting message?!\")\n}"
  },
  {
    "answers" : [
      {
        "answerText" : "Void",
        "isCorrect" : true,
        "reason" : "\/\/ When a function doesn't explicitly state its return value, it implicitly returns `Void`"
      },
      {
        "answerText" : "String",
        "isCorrect" : false
      },
      {
        "answerText" : "print()",
        "isCorrect" : false
      },
      {
        "answerText" : "func",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "functions",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the return type in the following code:\n\nfunc say(myName: String) {\n\tprint(myName)\n}\n"
  },
  {
    "answers" : [
      {
        "answerText" : "say",
        "isCorrect" : true
      },
      {
        "answerText" : "myName",
        "isCorrect" : false
      },
      {
        "answerText" : "String",
        "isCorrect" : false
      },
      {
        "answerText" : "func",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "functions"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the function in the following code:\n\nfunc say(myName: String) {\n\tprint(myName)\n}\n"
  },
  {
    "answers" : [
      {
        "answerText" : "myName",
        "isCorrect" : true
      },
      {
        "answerText" : "say",
        "isCorrect" : false
      },
      {
        "answerText" : "String",
        "isCorrect" : false
      },
      {
        "answerText" : "func",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "syntax",
      "functions"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the parameter in the following code:\n\nfunc say(myName: String) {\n\tprint(myName)\n}\n"
  },
  {
    "answers" : [
      {
        "answerText" : "myName",
        "isCorrect" : true
      },
      {
        "answerText" : "say",
        "isCorrect" : false
      },
      {
        "answerText" : "String",
        "isCorrect" : false
      },
      {
        "answerText" : "func",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "functions",
      "syntax"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Identify the name of the argument in the following code:\n\nfunc say(myName: String) {\n\tprint(myName)\n}\n"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ Calculate an the mode for all the numbers in the array",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ Determines if each item in the array is even",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ Provide a total for all the items in the array",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ Print out the mode for all numbers in the array",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "functions"
    ],
    "difficulty" : 1,
    "prompt" : "\/\/ What does the mystery function do?\n\nfunc mysteryFunction(array: [Int]) -> Double {\n\tguard array.count > 0 else { return 0 }\n\tlet array = array.sorted()\n\tif array.count.isMultiple(of: 2) {\n\t\tlet valueIndex = array.count \/ 2\n\t\tlet value1 = Double(array[valueIndex])\n\t\tlet value2 = Double(array[valueIndex - 1])\n\t\treturn (value1 + value2) \/ 2.0\n\t} else {\n\t\tlet index = array.count \/ 2\n\t\treturn Double(array[index])\n\t}\n}"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ Prints \"My name\" twice.",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ Vocally states \"My name\" through speakers, twice.",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ Prints \"My name\".",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ Prints \"say\" twice.",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "functions"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What does the mystery function do?\n\nfunc say() {\n\tprint(\"My name\")\n}\n\nfunc mysteryFunction() {\n\tsay()\n\tsay()\n}\n"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ Calculate an the average (the mean) for all the numbers in the array",
        "isCorrect" : true
      },
      {
        "answerText" : "\/\/ Divides each value in the array by a count",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ Provide a total for all the items in the array",
        "isCorrect" : false
      },
      {
        "answerText" : "\/\/ Print out the average (the mean) for all numbers in the array",
        "isCorrect" : false
      }
    ],
    "categoryTags" : [
      "functions"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ What does the mystery function do?\n\nfunc mysteryFunction(array: [Int]) -> Double {\n\tguard array.count > 0 else { return 0 }\n\n\tvar totalValue = 0\n\tfor number in array {\n\t\ttotalValue += number\n\t}\n\treturn Double(totalValue) \/ Double(array.count)\n}"
  },
  {
    "answers" : [
      {
        "answerText" : "false",
        "isCorrect" : true,
        "reason" : "\/\/ The reverse is true, actually. All delegates are protocols."
      },
      {
        "answerText" : "true",
        "isCorrect" : false,
        "reason" : "\/\/ The reverse is true, actually. All delegates are protocols."
      }
    ],
    "categoryTags" : [
      "protocols"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Boolean (true or false):\n\n\/\/ All protocols are delegates"
  },
  {
    "answers" : [
      {
        "answerText" : "true",
        "isCorrect" : true,
        "reason" : "\/\/ Delegates are just a type of protocol."
      },
      {
        "answerText" : "false",
        "isCorrect" : false,
        "reason" : "\/\/ Delegates are just a type of protocol."
      }
    ],
    "categoryTags" : [
      "protocols"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Boolean (true or false):\n\n\/\/ All delegates are protocols"
  },
  {
    "answers" : [
      {
        "answerText" : "struct Example: Codable {\n\tlet aString: String\n\tlet bNumber: Int\n}\n\/\/ and when you encode\/decode, use the `convertFromSnakeCase` option",
        "isCorrect" : true
      },
      {
        "answerText" : "struct Example: Codable {\n\tenum CodingKeys: String, CodingKey {\n\t\tcase aString = \"a_string\"\n\t\tcase bNumber = \"b_number\"\n\t}\n\tlet aString: String\n\tlet bNumber: Int\n}\n",
        "isCorrect" : false,
        "reason" : "\/\/ technically this isn't wrong, but this example is simple enough that a CodingKeys enum is unnecessary."
      },
      {
        "answerText" : "struct Example: Codable {\n\tlet a_string: String\n\tlet b_number: Int\n}\n",
        "isCorrect" : false,
        "reason" : "\/\/ you don't want to use snake case in Swift. It's ugly. Other languages shouldn't use it either. No one should!"
      },
      {
        "answerText" : "struct Example: Codable {\n\tlet bString: String\n\tlet aNumber: Int\n}\n",
        "isCorrect" : false,
        "reason" : "\/\/ take a close look at the variable names!"
      }
    ],
    "categoryTags" : [
      "codable"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ Which option would best represent this JSON using Codable in Swift?\n\n{\n    \"a_string\": \"foo\",\n    \"b_number\": 847\n}"
  },
  {
    "answers" : [
      {
        "answerText" : "\/\/ this is the correct answer",
        "isCorrect" : true
      }
    ],
    "categoryTags" : [
      "misc"
    ],
    "difficulty" : 0,
    "prompt" : "\/\/ This is a free question!"
  }
]